{"version":3,"file":"static/js/541.f1da02bb.chunk.js","mappings":"kOAqDA,UAhDa,WACX,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,GADSC,EAAAA,EAAAA,MACGC,QAmBlB,OAjBAC,EAAAA,EAAAA,YAAU,WAER,IAEE,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACOC,EAAAA,EAAAA,IAAQd,GAAI,KAAD,EAAAS,EAAAE,EAAAI,KAA1BL,EAAID,EAAJC,KAERX,EAAeW,GAAM,wBAAAC,EAAAK,OAAA,GAAAR,EAAA,KACtB,kBAJc,OAAAH,EAAAY,MAAA,KAAAC,UAAA,KAKfd,GAIA,CAHA,MAAOe,GACP,CAIJ,GAAG,CAACnB,KAGFoB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAC0B,IAAvBxB,EAAYyB,QAAgB,wCAC5BzB,EAAYyB,OAAS,IACpBC,EAAAA,EAAAA,KAAA,MAAAF,SACGxB,EAAY2B,KAAI,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAM3B,EAAE0B,EAAF1B,GAAI4B,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aAAY,OACnDT,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEE,EAAAA,EAAAA,KAAA,OACEM,IACED,EACI,kCAAoCA,EACpCE,EAENC,IAAKL,EACLM,MAAO,OAETT,EAAAA,EAAAA,KAAA,MAAAF,SAAKK,KACLP,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,aAAWM,OAXP5B,EAYJ,QAMjB,C,+LCjDakC,EAAQ,eAAA7B,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAA2B,EAAAC,EAAA,OAAA7B,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEGwB,EAAAA,EAAAA,IAAU,4FAE/B,KAAD,EAFW,OAEXF,EAAAxB,EAAAI,KAFOqB,EAAID,EAAJC,KAAIzB,EAAA2B,OAAA,SAGLF,GAAI,aAAAzB,EAAAC,KAAA,EAAAD,EAAA4B,GAAA5B,EAAA,SAEL,IAAI6B,MAAM7B,EAAA4B,GAAME,SAAS,KAAD,oBAAA9B,EAAAK,OAAA,GAAAR,EAAA,kBAEjC,kBAToB,OAAAH,EAAAY,MAAA,KAAAC,UAAA,KAWRwB,EAAa,eAAAhB,GAAApB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAoC,EAAM3C,GAAE,IAAA4C,EAAAR,EAAA,OAAA7B,IAAAA,MAAA,SAAAsC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAAAgC,EAAAjC,KAAA,EAAAiC,EAAAhC,KAAA,EAEVwB,EAAAA,EAAAA,IAAU,sCAADS,OACQ9C,EAAE,8CACxC,KAAD,EAFW,OAEX4C,EAAAC,EAAA9B,KAFOqB,EAAIQ,EAAJR,KAAIS,EAAAP,OAAA,SAILF,GAAI,aAAAS,EAAAjC,KAAA,EAAAiC,EAAAN,GAAAM,EAAA,SAEL,IAAIL,MAAMK,EAAAN,GAAME,SAAS,KAAD,oBAAAI,EAAA7B,OAAA,GAAA2B,EAAA,kBAEjC,gBAVyBI,GAAA,OAAArB,EAAAT,MAAA,KAAAC,UAAA,KAYbJ,EAAO,eAAAkC,GAAA1C,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA0C,EAAMjD,GAAE,IAAAkD,EAAAd,EAAA,OAAA7B,IAAAA,MAAA,SAAA4C,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,cAAAsC,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAEJwB,EAAAA,EAAAA,IAAU,sCAADS,OACQ9C,EAAE,sDACxC,KAAD,EAFW,OAEXkD,EAAAC,EAAApC,KAFOqB,EAAIc,EAAJd,KAAIe,EAAAb,OAAA,SAILF,GAAI,aAAAe,EAAAvC,KAAA,EAAAuC,EAAAZ,GAAAY,EAAA,SAEL,IAAIX,MAAMW,EAAAZ,GAAME,SAAS,KAAD,oBAAAU,EAAAnC,OAAA,GAAAiC,EAAA,kBAEjC,gBAVmBG,GAAA,OAAAJ,EAAA/B,MAAA,KAAAC,UAAA,KAYPmC,EAAU,eAAAC,GAAAhD,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAgD,EAAMvD,GAAE,IAAAwD,EAAApB,EAAA,OAAA7B,IAAAA,MAAA,SAAAkD,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,cAAA4C,EAAA7C,KAAA,EAAA6C,EAAA5C,KAAA,EAEPwB,EAAAA,EAAAA,IAAU,sCAADS,OACQ9C,EAAE,sDACxC,KAAD,EAFW,OAEXwD,EAAAC,EAAA1C,KAFOqB,EAAIoB,EAAJpB,KAAIqB,EAAAnB,OAAA,SAILF,GAAI,aAAAqB,EAAA7C,KAAA,EAAA6C,EAAAlB,GAAAkB,EAAA,SAEL,IAAIjB,MAAMiB,EAAAlB,GAAME,SAAS,KAAD,oBAAAgB,EAAAzC,OAAA,GAAAuC,EAAA,kBAEjC,gBAVsBG,GAAA,OAAAJ,EAAArC,MAAA,KAAAC,UAAA,KAYVyC,EAAe,eAAAC,GAAAtD,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAsD,EAAMC,GAAK,IAAAC,EAAA3B,EAAA,OAAA7B,IAAAA,MAAA,SAAAyD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAAmD,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAEfwB,EAAAA,EAAAA,IAAU,qFAE/B,CAAE4B,OAAQ,CAAEH,MAAOA,KACnB,KAAD,EAHW,OAGXC,EAAAC,EAAAjD,KAHOqB,EAAI2B,EAAJ3B,KAAI4B,EAAA1B,OAAA,SAKLF,GAAI,aAAA4B,EAAApD,KAAA,EAAAoD,EAAAzB,GAAAyB,EAAA,SAEL,IAAIxB,MAAMwB,EAAAzB,GAAME,SAAS,KAAD,oBAAAuB,EAAAhD,OAAA,GAAA6C,EAAA,kBAEjC,gBAX2BK,GAAA,OAAAN,EAAA3C,MAAA,KAAAC,UAAA,I","sources":["components/Cast/Cast.js","components/GetFilms/Get.js"],"sourcesContent":["import { getCast } from 'components/GetFilms/Get';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport foto from '../NotFoundActor/NotFoundActor.jpeg';\n\nconst Cast = () => {\n  const [fetchedCast, setFetchedCast] = useState([]);\n  const moveId = useParams();\n  const id = moveId.movieId;\n\n  useEffect(() => {\n    // setLoading(true);\n    try {\n      // setError(false);\n      const fetchFilm = async () => {\n        const { cast } = await getCast(id);\n\n        setFetchedCast(cast);\n      };\n      fetchFilm();\n    } catch (error) {\n      // setError(true);\n    } finally {\n      // setLoading(false);\n    }\n  }, [id]);\n\n  return (\n    <>\n      {fetchedCast.length === 0 && 'We don`t have any cast for this movie'}\n      {fetchedCast.length > 0 && (\n        <ul>\n          {fetchedCast.map(({ name, id, character, profile_path }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : foto\n                }\n                alt={name}\n                width={300}\n              />\n              <h3>{name}</h3>\n              <p>Character:{character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const getFilms = async () => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=fed317ab3be0f2b7619ff5ef4eb716b2`\n    );\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getSingleFilm = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=fed317ab3be0f2b7619ff5ef4eb716b2`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=fed317ab3be0f2b7619ff5ef4eb716b2`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=fed317ab3be0f2b7619ff5ef4eb716b2`\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getMoviesSearch = async query => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=fed317ab3be0f2b7619ff5ef4eb716b2`,\n      { params: { query: query } }\n    );\n\n    return data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n"],"names":["_useState","useState","_useState2","_slicedToArray","fetchedCast","setFetchedCast","id","useParams","movieId","useEffect","fetchFilm","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getCast","cast","_context","prev","next","getCast","sent","stop","apply","arguments","error","_jsxs","_Fragment","children","length","_jsx","map","_ref2","name","character","profile_path","src","foto","alt","width","getFilms","_yield$axios$get","data","axios","abrupt","t0","Error","message","getSingleFilm","_callee2","_yield$axios$get2","_context2","concat","_x","_ref3","_callee3","_yield$axios$get3","_context3","_x2","getReviews","_ref4","_callee4","_yield$axios$get4","_context4","_x3","getMoviesSearch","_ref5","_callee5","query","_yield$axios$get5","_context5","params","_x4"],"sourceRoot":""}